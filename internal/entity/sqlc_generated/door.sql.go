// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: door.sql

package sqlc_generated

import (
	"context"

	"github.com/lib/pq"
)

const getDoorFromMapConfigurationIDs = `-- name: GetDoorFromMapConfigurationIDs :many
SELECT map_configuration_id,
       door.id AS door_id,
       door.name,
       door.type,
       map_door.position_x,
       map_door.position_y,
       map_door.door_direction
FROM map_configuration_door AS map_door
         INNER JOIN door
                    ON door.id = map_door.door_id
WHERE map_configuration_id = ANY ($1:: BIGINT [])
`

type GetDoorFromMapConfigurationIDsRow struct {
	MapConfigurationID int64        `json:"map_configuration_id"`
	DoorID             int64        `json:"door_id"`
	Name               string       `json:"name"`
	Type               DoorType     `json:"type"`
	PositionX          int32        `json:"position_x"`
	PositionY          int32        `json:"position_y"`
	DoorDirection      MapDirection `json:"door_direction"`
}

func (q *Queries) GetDoorFromMapConfigurationIDs(ctx context.Context, mapConfigurationIds []int64) ([]*GetDoorFromMapConfigurationIDsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDoorFromMapConfigurationIDs, pq.Array(mapConfigurationIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetDoorFromMapConfigurationIDsRow{}
	for rows.Next() {
		var i GetDoorFromMapConfigurationIDsRow
		if err := rows.Scan(
			&i.MapConfigurationID,
			&i.DoorID,
			&i.Name,
			&i.Type,
			&i.PositionX,
			&i.PositionY,
			&i.DoorDirection,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
