// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: item.sql

package sqlc_generated

import (
	"context"

	"github.com/lib/pq"
)

const getItemFromMapConfigurationIDs = `-- name: GetItemFromMapConfigurationIDs :many
SELECT map_configuration_id, item.id AS item_id, item.name, item.type, map_item.position_x, map_item.position_y
FROM map_configuration_item AS map_item
         INNER JOIN item ON item.id = map_item.item_id
WHERE map_configuration_id = ANY ($1:: BIGINT [])
`

type GetItemFromMapConfigurationIDsRow struct {
	MapConfigurationID int64    `json:"map_configuration_id"`
	ItemID             int64    `json:"item_id"`
	Name               string   `json:"name"`
	Type               ItemType `json:"type"`
	PositionX          int32    `json:"position_x"`
	PositionY          int32    `json:"position_y"`
}

func (q *Queries) GetItemFromMapConfigurationIDs(ctx context.Context, mapConfigurationIds []int64) ([]*GetItemFromMapConfigurationIDsRow, error) {
	rows, err := q.db.QueryContext(ctx, getItemFromMapConfigurationIDs, pq.Array(mapConfigurationIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetItemFromMapConfigurationIDsRow{}
	for rows.Next() {
		var i GetItemFromMapConfigurationIDsRow
		if err := rows.Scan(
			&i.MapConfigurationID,
			&i.ItemID,
			&i.Name,
			&i.Type,
			&i.PositionX,
			&i.PositionY,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
