// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: rule.sql

package sqlc_generated

import (
	"context"

	"github.com/lib/pq"
)

const getRuleFromMapConfigurationIDs = `-- name: GetRuleFromMapConfigurationIDs :many
SELECT map_configuration_id, rule, theme, parameters
FROM map_configuration_rule
WHERE map_configuration_id = ANY ($1:: BIGINT [])
`

func (q *Queries) GetRuleFromMapConfigurationIDs(ctx context.Context, mapConfigurationIds []int64) ([]*MapConfigurationRule, error) {
	rows, err := q.db.QueryContext(ctx, getRuleFromMapConfigurationIDs, pq.Array(mapConfigurationIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*MapConfigurationRule{}
	for rows.Next() {
		var i MapConfigurationRule
		if err := rows.Scan(
			&i.MapConfigurationID,
			&i.Rule,
			&i.Theme,
			pq.Array(&i.Parameters),
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
