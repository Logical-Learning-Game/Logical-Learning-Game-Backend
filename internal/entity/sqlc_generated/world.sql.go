// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: world.sql

package sqlc_generated

import (
	"context"

	"github.com/lib/pq"
)

const listWorldFromMapConfigurationIDs = `-- name: ListWorldFromMapConfigurationIDs :many
SELECT id AS world_id, name
FROM world
WHERE id = ANY ($1:: BIGINT [])
`

type ListWorldFromMapConfigurationIDsRow struct {
	WorldID int64  `json:"world_id"`
	Name    string `json:"name"`
}

func (q *Queries) ListWorldFromMapConfigurationIDs(ctx context.Context, mapConfigurationIds []int64) ([]*ListWorldFromMapConfigurationIDsRow, error) {
	rows, err := q.db.QueryContext(ctx, listWorldFromMapConfigurationIDs, pq.Array(mapConfigurationIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListWorldFromMapConfigurationIDsRow{}
	for rows.Next() {
		var i ListWorldFromMapConfigurationIDsRow
		if err := rows.Scan(&i.WorldID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
