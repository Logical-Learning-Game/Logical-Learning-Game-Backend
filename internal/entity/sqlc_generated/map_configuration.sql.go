// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: map_configuration.sql

package sqlc_generated

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const getMapConfigFromPlayerID = `-- name: GetMapConfigFromPlayerID :many
SELECT map_conf.id AS map_config_id,
       map_conf.world_id,
       world.name  AS world_name,
       map.tile_array,
       map.height  AS map_height,
       map.width   AS map_width,
       map.start_player_direction,
       map.start_player_position_x,
       map.start_player_position_y,
       map.goal_position_x,
       map.goal_position_y,
       map_player.is_pass,
       map_conf.config_name,
       map_conf.map_image_path,
       map_conf.difficulty,
       map_conf.star_requirement,
       map_conf.least_solvable_command_gold,
       map_conf.least_solvable_command_silver,
       map_conf.least_solvable_command_bronze,
       map_conf.least_solvable_action_gold,
       map_conf.least_solvable_action_silver,
       map_conf.least_solvable_action_bronze
FROM map_configuration_for_player AS map_player
         INNER JOIN map_configuration AS map_conf ON map_player.map_configuration_id = map_conf.id
         INNER JOIN world ON world.id = map_conf.world_id
         INNER JOIN map ON map.id = map_conf.map_id
WHERE player_id = $1
`

type GetMapConfigFromPlayerIDRow struct {
	MapConfigID                int64          `json:"map_config_id"`
	WorldID                    int64          `json:"world_id"`
	WorldName                  string         `json:"world_name"`
	TileArray                  []int32        `json:"tile_array"`
	MapHeight                  int32          `json:"map_height"`
	MapWidth                   int32          `json:"map_width"`
	StartPlayerDirection       MapDirection   `json:"start_player_direction"`
	StartPlayerPositionX       int32          `json:"start_player_position_x"`
	StartPlayerPositionY       int32          `json:"start_player_position_y"`
	GoalPositionX              int32          `json:"goal_position_x"`
	GoalPositionY              int32          `json:"goal_position_y"`
	IsPass                     bool           `json:"is_pass"`
	ConfigName                 string         `json:"config_name"`
	MapImagePath               sql.NullString `json:"map_image_path"`
	Difficulty                 MapDifficulty  `json:"difficulty"`
	StarRequirement            int32          `json:"star_requirement"`
	LeastSolvableCommandGold   int32          `json:"least_solvable_command_gold"`
	LeastSolvableCommandSilver int32          `json:"least_solvable_command_silver"`
	LeastSolvableCommandBronze int32          `json:"least_solvable_command_bronze"`
	LeastSolvableActionGold    int32          `json:"least_solvable_action_gold"`
	LeastSolvableActionSilver  int32          `json:"least_solvable_action_silver"`
	LeastSolvableActionBronze  int32          `json:"least_solvable_action_bronze"`
}

func (q *Queries) GetMapConfigFromPlayerID(ctx context.Context, playerID string) ([]*GetMapConfigFromPlayerIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getMapConfigFromPlayerID, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetMapConfigFromPlayerIDRow{}
	for rows.Next() {
		var i GetMapConfigFromPlayerIDRow
		if err := rows.Scan(
			&i.MapConfigID,
			&i.WorldID,
			&i.WorldName,
			pq.Array(&i.TileArray),
			&i.MapHeight,
			&i.MapWidth,
			&i.StartPlayerDirection,
			&i.StartPlayerPositionX,
			&i.StartPlayerPositionY,
			&i.GoalPositionX,
			&i.GoalPositionY,
			&i.IsPass,
			&i.ConfigName,
			&i.MapImagePath,
			&i.Difficulty,
			&i.StarRequirement,
			&i.LeastSolvableCommandGold,
			&i.LeastSolvableCommandSilver,
			&i.LeastSolvableCommandBronze,
			&i.LeastSolvableActionGold,
			&i.LeastSolvableActionSilver,
			&i.LeastSolvableActionBronze,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMapConfigurationWithItemFromPlayerID = `-- name: GetMapConfigurationWithItemFromPlayerID :many
SELECT map_conf.id,
       map_conf.world_id,
       world.name          AS world_name,
       map.tile_array,
       map.height          AS map_height,
       map.width           AS map_width,
       map.start_player_direction,
       map.start_player_position_x,
       map.start_player_position_y,
       map.goal_position_x,
       map.goal_position_y,
       map_conf.config_name,
       map_conf.map_image_path,
       map_conf.difficulty,
       map_conf.star_requirement,
       map_conf.least_solvable_command_gold,
       map_conf.least_solvable_command_silver,
       map_conf.least_solvable_command_bronze,
       map_conf.least_solvable_action_gold,
       map_conf.least_solvable_action_silver,
       map_conf.least_solvable_action_bronze,
       map_item.item_id,
       item.name           AS item_name,
       item.type           AS item_type,
       map_item.position_x AS item_position_x,
       map_item.position_y AS item_position_y
FROM map_configuration_for_player AS map_player
         INNER JOIN map_configuration AS map_conf ON map_player.map_configuration_id = map_conf.id
         INNER JOIN map_configuration_item AS map_item ON map_item.map_configuration_id = map_conf.id
         INNER JOIN item ON item.id = map_item.item_id
         INNER JOIN world ON world.id = map_conf.world_id
         INNER JOIN map ON map.id = map_conf.map_id
WHERE player_id = $1
`

type GetMapConfigurationWithItemFromPlayerIDRow struct {
	ID                         int64          `json:"id"`
	WorldID                    int64          `json:"world_id"`
	WorldName                  string         `json:"world_name"`
	TileArray                  []int32        `json:"tile_array"`
	MapHeight                  int32          `json:"map_height"`
	MapWidth                   int32          `json:"map_width"`
	StartPlayerDirection       MapDirection   `json:"start_player_direction"`
	StartPlayerPositionX       int32          `json:"start_player_position_x"`
	StartPlayerPositionY       int32          `json:"start_player_position_y"`
	GoalPositionX              int32          `json:"goal_position_x"`
	GoalPositionY              int32          `json:"goal_position_y"`
	ConfigName                 string         `json:"config_name"`
	MapImagePath               sql.NullString `json:"map_image_path"`
	Difficulty                 MapDifficulty  `json:"difficulty"`
	StarRequirement            int32          `json:"star_requirement"`
	LeastSolvableCommandGold   int32          `json:"least_solvable_command_gold"`
	LeastSolvableCommandSilver int32          `json:"least_solvable_command_silver"`
	LeastSolvableCommandBronze int32          `json:"least_solvable_command_bronze"`
	LeastSolvableActionGold    int32          `json:"least_solvable_action_gold"`
	LeastSolvableActionSilver  int32          `json:"least_solvable_action_silver"`
	LeastSolvableActionBronze  int32          `json:"least_solvable_action_bronze"`
	ItemID                     int64          `json:"item_id"`
	ItemName                   string         `json:"item_name"`
	ItemType                   ItemType       `json:"item_type"`
	ItemPositionX              int32          `json:"item_position_x"`
	ItemPositionY              int32          `json:"item_position_y"`
}

func (q *Queries) GetMapConfigurationWithItemFromPlayerID(ctx context.Context, playerID string) ([]*GetMapConfigurationWithItemFromPlayerIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getMapConfigurationWithItemFromPlayerID, playerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetMapConfigurationWithItemFromPlayerIDRow{}
	for rows.Next() {
		var i GetMapConfigurationWithItemFromPlayerIDRow
		if err := rows.Scan(
			&i.ID,
			&i.WorldID,
			&i.WorldName,
			pq.Array(&i.TileArray),
			&i.MapHeight,
			&i.MapWidth,
			&i.StartPlayerDirection,
			&i.StartPlayerPositionX,
			&i.StartPlayerPositionY,
			&i.GoalPositionX,
			&i.GoalPositionY,
			&i.ConfigName,
			&i.MapImagePath,
			&i.Difficulty,
			&i.StarRequirement,
			&i.LeastSolvableCommandGold,
			&i.LeastSolvableCommandSilver,
			&i.LeastSolvableCommandBronze,
			&i.LeastSolvableActionGold,
			&i.LeastSolvableActionSilver,
			&i.LeastSolvableActionBronze,
			&i.ItemID,
			&i.ItemName,
			&i.ItemType,
			&i.ItemPositionX,
			&i.ItemPositionY,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
